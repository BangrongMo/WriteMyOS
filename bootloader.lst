     1                                  HDDPORT equ 0x1f0
     2                                  SETCHAR equ 0x07
     3                                  VIDEOMEM equ 0xb800
     4                                  STRINGLEN equ 0xff
     5                                  NUL equ 0x00
     6                                  
     7                                  section code align=16 vstart=0x7c00
     8 00000000 B80300                  mov ax, 3	;Clear screen
     9 00000003 CD10                    int 10h
    10 00000005 E8A600                  call PrintLine
    11                                  
    12 00000008 31FF                    xor di,di
    13 0000000A 8B36[C000]              mov si,[READSTART]
    14 0000000E 8B0E[C200]              mov cx,[READSTART+0X02] ;存储lba28地址,需要四个字节,高位cx低位si
    15 00000012 A0[C400]                mov al,[SECTORNUM];要读入的扇区数量
    16 00000015 50                      push ax ;保存扇区值al,push 要用ax，所以一起ah保存了
    17                                  
    18 00000016 A1[C500]                mov ax,[DESTMEM]
    19 00000019 8B16[C700]              mov dx,[DESTMEM+0X02]
    20 0000001D BB1000                  mov bx,16 ;因为DESTMEM是完整地址，除以16计算DESTMEM的段地址
    21 00000020 F7F3                    div bx
    22                                  
    23 00000022 8ED8                    mov ds,ax ;配置段地址
    24 00000024 31FF                    xor di,di ;偏移地址置0
    25 00000026 58                      pop ax
    26                                  
    27                                  
    28                                  
    29 00000027 E83F00                  call READHDD
    30                                  
    31                                  ;加载完program.bin后，里面编译好的段地址和偏移地址是不能直接用的，
    32                                  ;因为编译器是按照program作为第一个扇区的程序来设置地址的
    33                                  ;而bootloader实际上才是第一个扇区的，所以要重新计算program的段地址和偏移地址，
    34                                  ;并修改加载到内存的program，才能跳转到program执行
    35                                  ;mov ax, [1000h] 默认等价于 mov ax, [ds:1000h]
    36                                  ;jmp 1234h 那么跳转目标是 CS:1234h，在当前代码段中跳转。
    37                                  
    38                                  
    39                                  ResetSegment: ;？修改段地址到0x1000,即第二个扇区读入到内存的地址
    40 0000002A BB0400                  	mov bx,0x04 ;将program段地址所在的内存地址写入bx,地址来源于program.asm中CodeSeg dd section.code.start
    41 0000002D 8A0E1000                	mov cl,[0x10] ;0x10地址存储了program有多少个段,方便后面作为循环次数 ds本来以及指向DESTMEM，所以直接取
    42                                  	
    43                                  	.reset:	
    44                                  	
    45 00000031 8B07                    	mov ax,[bx] ;取出段地址（其实是相对地址，[bx]存储的值是编译program.asm产生的，
    46                                  				;是独立的,之后和bootloader整合就要重新计算段和偏移）
    47 00000033 8B5702                  	mov dx,[bx+2]  ;由于地址是四个字节，取两次
    48                                  	
    49                                  	
    50                                  	;汇编代码中，从内存取数据的时候，是ds:偏移地址取值，段内代码跳转的时候是cs:偏移地址 。
    51                                  	;为了获得正确的段内偏移地址
    52                                  	;读programer程序的大小，因为是32位，读两次
    53                                  	;现在dx:ax是program初始CodeSeg地址，下面将重新计算
    54                                  	
    55                                  		
    56                                  	
    57                                  	;DESTMEM编译到了当前代码段（我需要从当前代码段（CS）中，偏移为 DESTMEM 的位置读取值）
    58                                  	;,DESTMEM的值要通过cs查找，告诉cpu
    59 00000036 2E0306[C500]            	add ax,[cs:DESTMEM]  ; cs:0xffff,内存值0x0000，前面取出了ax，将两者相加
    60 0000003B 2E1316[C700]            	adc dx,[cs:DESTMEM+2] ;内存值0x0001
    61 00000040 BE1000                  	mov si,16 ;0x0001_0020  >> 16  =  0x1002
    62 00000043 F7F6                    	div si
    63 00000045 8907                    	mov [bx],ax ;新的地址计算完成,重写到[0x04]处
    64                                  	
    65                                  	
    66                                  	
    67 00000047 83C304                  	add bx,4 ;准备计算下一个
    68 0000004A E2E5                    	loop .reset
    69                                  	
    70                                  	ResetEntry:
    71 0000004C A11300                  	mov ax,[0x13] ;ax，所以取了13、14
    72 0000004F 8B161500                	mov dx,[0x15] 
    73                                  
    74                                  	
    75 00000053 2E0306[C500]            	add ax,[cs:DESTMEM] ; 
    76 00000058 2E0316[C700]            	add dx,[cs:DESTMEM+2] ;
    77 0000005D BE1000                  	mov si,16
    78 00000060 F7F6                    	div si  	;shr ax,4
    79                                  	
    80 00000062 A31300                  	mov [0x13],ax
    81                                  	
    82 00000065 FF2E1100                	jmp far [0x11] ;jmp far [address] 是通过该内存地址处的 4 字节（16位 offset + 16位 segment）作为目标。
    83                                  					;DESTMEM:0x11是入口地址
    84                                  	
    85                                  READHDD:
    86 00000069 50                      	push ax
    87 0000006A 53                      	push bx
    88 0000006B 51                      	push cx
    89 0000006C 52                      	push dx
    90 0000006D BAF201                  	mov dx,HDDPORT+2
    91 00000070 EE                      	out dx,al ;al存储的扇区数,写到dx端口
    92                                  	
    93 00000071 BAF301                  	mov dx,HDDPORT+3 ;开始写地址
    94 00000074 89F0                    	mov ax,si ;lba28低位si写到ax
    95 00000076 EE                      	out dx,al ;写低位 0-7
    96                                  
    97 00000077 BAF401                  	mov dx,HDDPORT+4
    98 0000007A 88E0                    	mov al,ah
    99 0000007C EE                      	out dx,al ;写高位 8-15
   100                                  	
   101 0000007D BAF501                  	mov dx,HDDPORT+5
   102 00000080 89C8                    	mov ax,cx ;换一个寄存器赋值到ax,写低位 16-23
   103 00000082 EE                      	out dx,al
   104                                  	
   105 00000083 BAF601                  	mov dx,HDDPORT+6
   106 00000086 88E0                    	mov al,ah
   107 00000088 B4E0                    	mov ah,0xe0 ;采用lba模式读取
   108 0000008A 08E0                    	or al,ah
   109 0000008C EE                      	out dx,al ;写24-27位
   110                                  	
   111 0000008D BAF701                  	mov dx,HDDPORT+7
   112 00000090 B020                    	mov al,0x20 ;0x20为读模式,0x30为写模式
   113 00000092 EE                      	out dx,al
   114                                  	
   115                                  	.waits: ;自旋锁循环等待磁盘io可用
   116 00000093 EC                      	in al,dx
   117 00000094 2488                    	and al,0x88
   118 00000096 3C08                    	cmp al,0x08
   119 00000098 75F9                    	jnz .waits
   120                                  	
   121 0000009A BAF001                  	mov dx, HDDPORT ;地址写完,dx挪作hddport使用
   122 0000009D B90001                  	mov cx,256 ;每次可以读2字节，所以循环256读取一个扇区
   123                                  	
   124                                  	.readword:
   125 000000A0 ED                      	in ax,dx ;读取端口数据到ax
   126 000000A1 3E8905                  	mov [ds:di],ax ;存到内存
   127 000000A4 83C702                  	add di,2
   128                                  	;or ah,0x00 ;因为数据以0x00结尾，所以看到0x00就退出
   129                                  	;jnz .readword
   130 000000A7 E2F7                    	loop .readword
   131                                  	.return:
   132 000000A9 5A                      	pop dx
   133 000000AA 59                      	pop cx
   134 000000AB 5B                      	pop bx
   135 000000AC 58                      	pop ax
   136 000000AD C3                      	ret
   137                                  
   138                                  PrintLine:
   139 000000AE B93100                  	mov cx,msgEnd-msgStart;类似for循环，先确定循环次数
   140 000000B1 BE[CB00]                	mov si,msgStart
   141 000000B4 B307                    	mov bl,0x07 ;指定字符的显示属性,白色（0x7）,黑色（0x0）
   142                                  	.putc:
   143 000000B6 8A04                    	mov al,[si]
   144 000000B8 46                      	inc si
   145 000000B9 B40E                    	mov ah,0x0e
   146 000000BB CD10                    	int 0x10
   147 000000BD E2F7                    	loop .putc
   148 000000BF C3                      	ret
   149                                  
   150                                  %if 0
   151                                  PrintString:
   152                                  	.setup:
   153                                  	mov ax,VIDEOMEM
   154                                  	mov es,ax
   155                                  	mov bh,SETCHAR
   156                                  	mov cx,STRINGLEN 
   157                                  	
   158                                  	.printchar:
   159                                  	mov bl,[ds:si]
   160                                  	inc si
   161                                  	mov [es:di],bl
   162                                  	inc di
   163                                  	mov [es:di],bh
   164                                  	inc di
   165                                  	or bl,NUL
   166                                  	jz .return
   167                                  	loop .printchar
   168                                  	.return:
   169                                  	ret
   170                                  	
   171                                  %endif
   172                                  
   173 000000C0 01000000                READSTART  dd 1
   174 000000C4 01                      SECTORNUM  db 1
   175 000000C5 00000100                DESTMEM	   dd 0x10000
   176                                  
   177 000000C9 EBFE                    End: jmp End
   178                                  
   179 000000CB 6D6272206C6F616465-     msgStart db 'mbr loaded secucessly,now loading next sector... '
   179 000000D4 642073656375636573-
   179 000000DD 736C792C6E6F77206C-
   179 000000E6 6F6164696E67206E65-
   179 000000EF 787420736563746F72-
   179 000000F8 2E2E2E20           
   180 000000FC 00                      msgEnd db 0x00
   181                                  
   182 000000FD 00<rep 101h>            times 510-($-$$) db 0 ; 填充剩余空间
   183 000001FE 55AA                    dw 0xAA55
