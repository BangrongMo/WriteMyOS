     1                                  NUL equ 0x00
     2                                  SETCHAR equ 0x07
     3                                  VIDEOMEM equ 0xb800
     4                                  STRINGLEN equ 0xffff
     5                                  
     6                                  section head align=16 vstart=0
     7                                  
     8 00000000 [00000000]              	Size dd ProgramEnd;偏移4B 0x00,程序大小 
     9                                  	SegmentAddr : ;显示各个段的地址
    10 00000004 [00000000]              	CodeSeg dd section.code.start;4B 0x04  nasm 提供的点语法 section.code.start代表code段的汇编地址
    11 00000008 [00000000]              	DataSeg dd section.data.start;4B 0x08  section.data.start代表data段的汇编地址
    12 0000000C [00000000]              	StackSeg dd section.stack.start;4B 0x0c 
    13                                  	SegmentNum:           
    14 00000010 03                      	SegNum db (SegmentNum-SegmentAddr)/4;1B 0x10 计算SegNum到SegmentAddr之间有多少个段，每个段占4字节,
    15                                  										;计算有多少个段，以便bootloader加载到cl作为循环次数，重新计算段偏移
    16                                  	
    17 00000011 [0000]                  	Entry dw CodeStart; 2B 0x11  入口点地址，由段+偏移组成, CodeStart是偏移 ，
    18 00000013 [00000000]              		  dd section.code.start; 4B 0x13  段地址 
    19                                  	
    20                                  	
    21                                  section code align=16 vstart=0
    22                                  
    23                                  CodeStart:
    24 00000000 A1[0800]                	mov ax,[DataSeg]
    25 00000003 8ED8                    	mov ds,ax
    26 00000005 31F6                    	xor si,si
    27 00000007 E80200                  	call PrintString
    28 0000000A EBFE                    	jmp $
    29                                  
    30                                  PrintString:
    31                                      .setup:
    32 0000000C 50                          push ax
    33 0000000D 53                      	push bx
    34 0000000E 51                      	push cx
    35 0000000F 52                      	push dx
    36                                  	;Clear screen
    37 00000010 B80300                  	mov ax, 3
    38 00000013 CD10                    	int 10h
    39                                  	
    40                                  	;mov ax,0x9999
    41 00000015 B800B8                  	mov ax,VIDEOMEM
    42 00000018 8EC0                    	mov es,ax
    43 0000001A 31FF                    	xor di,di
    44                                  	
    45 0000001C B707                    	mov bh,SETCHAR
    46 0000001E B9FFFF                  	mov cx,STRINGLEN 
    47                                  	
    48                                  	.printchar:
    49 00000021 3E8A1C                  	mov bl,[ds:si]
    50 00000024 46                      	inc si
    51 00000025 26881D                  	mov [es:di],bl
    52 00000028 47                      	inc di
    53 00000029 26883D                  	mov [es:di],bh
    54 0000002C 47                      	inc di
    55 0000002D 80CB00                  	or bl,NUL
    56 00000030 7402                    	jz .return
    57 00000032 E2ED                    	loop .printchar
    58                                  	.return:
    59 00000034 89FB                    	  mov bx, di
    60 00000036 5A                      	 pop dx
    61 00000037 59                      	 pop cx
    62 00000038 5B                      	 pop bx
    63 00000039 58                      	 pop ax
    64 0000003A C3                      	  ret
    65                                  
    66 0000003B 0A000000                READSTART dd 10
    67 0000003F 01                      SECTORNUM  db 1
    68 00000040 00000100                DESTMEM	   dd 0x10000
    69                                  
    70                                  
    71                                  section data align=16 vstart=0
    72 00000000 48656C6C6F20576F72-     	Hello db 'Hello World ,I am from program on sector 2,loaded by bootloader',0
    72 00000009 6C64202C4920616D20-
    72 00000012 66726F6D2070726F67-
    72 0000001B 72616D206F6E207365-
    72 00000024 63746F7220322C6C6F-
    72 0000002D 616465642062792062-
    72 00000036 6F6F746C6F61646572-
    72 0000003F 00                 
    73                                  section stack align=16 vstart=0
    74 00000000 <res 80h>               	resb 128
    74          ******************       warning: uninitialized space declared in stack section: zeroing [-w+zeroing]
    75                                  section end align=16
    76                                  	ProgramEnd:
