     1                                  NUL equ 0x00
     2                                  SETCHAR equ 0x07
     3                                  VIDEOMEM equ 0xb800
     4                                  STRINGLEN equ 0xffff
     5                                  VGACMDPORT equ 0x3d4
     6                                  VGADATAPORT equ 0x3d5
     7                                  
     8                                  section head align=16 vstart=0
     9                                  
    10 00000000 [00000000]              	Size dd ProgramEnd;偏移4B 0x00,程序大小 
    11                                  	SegmentAddr : ;显示各个段的地址
    12 00000004 [00000000]              	CodeSeg dd section.code.start;4B 0x04  nasm 提供的点语法 section.code.start代表code段的汇编地址
    13 00000008 [00000000]              	DataSeg dd section.data.start;4B 0x08  section.data.start代表data段的汇编地址
    14 0000000C [00000000]              	StackSeg dd section.stack.start;4B 0x0c 
    15                                  	SegmentNum:           
    16 00000010 03                      	SegNum db (SegmentNum-SegmentAddr)/4;1B 0x10 计算SegNum到SegmentAddr之间有多少个段，每个段占4字节,
    17                                  										;计算有多少个段，以便bootloader加载到cl作为循环次数，重新计算段偏移
    18                                  	
    19 00000011 [0000]                  	Entry dw CodeStart; 2B 0x11  入口点地址，由段+偏移组成, CodeStart是偏移 ，
    20 00000013 [00000000]              		  dd section.code.start; 4B 0x13  段地址 
    21                                  	
    22                                  	
    23                                  section code align=16 vstart=0
    24                                  
    25                                  CodeStart: ;初始化寄存器的各个段
    26 00000000 A1[0800]                	mov ax,[DataSeg]
    27 00000003 8ED8                    	mov ds,ax 
    28 00000005 A1[0C00]                	mov ax,[StackSeg]
    29 00000008 8ED0                    	mov ss,ax
    30 0000000A BC[FB00]                	mov sp ,StackEnd
    31 0000000D 31F6                    	xor si,si
    32 0000000F E80200                  	call PrintLine
    33 00000012 EBFE                    	jmp $
    34                                  	
    35                                  PrintLine:
    36                                  
    37 00000014 B9FA00                  	mov cx,HelloEnd-Hello ;类似for循环，先确定循环次数
    38 00000017 31F6                    	xor si,si
    39 00000019 B307                    	mov bl,0x07 ;指定字符的显示属性,白色（0x7）,黑色（0x0）
    40                                  	.putc:
    41 0000001B 8A04                    	mov al,[si]
    42 0000001D 46                      	inc si
    43 0000001E B40E                    	mov ah,0x0e
    44 00000020 CD10                    	int 0x10
    45 00000022 E2F7                    	loop .putc
    46                                  
    47 00000024 C3                      	ret
    48                                  
    49                                  %if 0
    50                                  	xor si,si;   类似while循环，每次需要判断字符是否为0x00,消耗更多cpu周期
    51                                  	mov bl, 0x07
    52                                  	.putc:
    53                                  	mov al,[si]
    54                                  	cmp al,0x00
    55                                  	je .return
    56                                  	inc si
    57                                  	mov ah,0x0e
    58                                  	int 0x10
    59                                  	loop .putc
    60                                  	.return:
    61                                  	ret
    62                                  %endif	
    63                                  	
    64                                  	
    65                                  %if 0
    66                                  PrintString:
    67                                      .setup:
    68                                      push ax
    69                                  	push bx
    70                                  	push cx
    71                                  	push dx
    72                                  	;Clear screen
    73                                  	;mov ax, 3
    74                                  	;int 10h
    75                                  	;mov ax,0x9999
    76                                  	mov ax,VIDEOMEM
    77                                  	mov es,ax
    78                                  	xor di,di
    79                                  	
    80                                  	mov bh,SETCHAR
    81                                  	mov cx,STRINGLEN 
    82                                  	
    83                                  	.printchar:
    84                                  	mov bl,[ds:si]
    85                                  	
    86                                  	cmp bl,0x0d
    87                                  	jz .putCR
    88                                  	cmp bl,0x0a
    89                                  	jz .putLF
    90                                  	or bl,NUL ;优化执行流程，写入显存以前应该先判断是换行还是回车还是普通字符
    91                                  	jz .return
    92                                  	
    93                                  	
    94                                  	
    95                                  	inc si
    96                                  	mov [es:di],bl
    97                                  	inc di
    98                                  	mov [es:di],bh
    99                                  	inc di
   100                                  	call SetCursor
   101                                  	jmp .loopEnd
   102                                  
   103                                  	;字符输出中，每输出一个字符，si+1,di+2
   104                                  	;0xOD 输出回车 0x0A 换行
   105                                  	 .putCR: ;计算当前行第一个字符在屏幕总字符的位置 之planA :321 / 160 =2,2x160=320.得到开头字符是第320个
   106                                  	 ;mov bl,160
   107                                  	 ;mov ax,di
   108                                  	 ;div bl
   109                                  	 ;mul bl
   110                                  	 ;mov di,ax
   111                                  	 
   112                                  	 mov bl,160 ;planB 321/160=2...1,321-1=320,得到开头字符是第320个
   113                                  	 mov ax,di
   114                                  	 div bl ;低八位AL 存储除法的商,高八位 AH 存储除法的余数。
   115                                  	 shr ax,8 ;让al存储余数
   116                                  	 sub di, ax
   117                                  	 call SetCursor
   118                                  	 inc si
   119                                  	 jmp .loopEnd
   120                                  	 
   121                                  	 
   122                                  	 .putLF: ;换行
   123                                  	 add di,160;
   124                                  	 call SetCursor
   125                                  	 inc si
   126                                  	 jmp .loopEnd
   127                                   
   128                                  	.loopEnd:
   129                                  	loop .printchar
   130                                  	.return:
   131                                  	  mov bx, di
   132                                  	 pop dx
   133                                  	 pop cx
   134                                  	 pop bx
   135                                  	 pop ax
   136                                  	  ret
   137                                  
   138                                  SetCursor:
   139                                  	push dx
   140                                  	push bx
   141                                  	push ax
   142                                  	mov ax,di
   143                                  	mov dx,0
   144                                  	mov bx,2
   145                                  	div bx ;计算字符地址，因为一个di =2*si
   146                                  	
   147                                  	mov bx,ax
   148                                  	mov dx,VGACMDPORT
   149                                  	mov al ,0x0e ;显卡寄存器 低位
   150                                  	out dx,al;
   151                                  	mov dx,VGADATAPORT
   152                                  	mov al,bh
   153                                  	out dx,al 
   154                                  	mov dx,VGACMDPORT
   155                                  	mov al,0x0f ;高位
   156                                  	out dx,al
   157                                  	mov dx,VGADATAPORT
   158                                  	mov al,bl
   159                                  	out dx,al
   160                                  	
   161                                  	
   162                                  	pop ax
   163                                  	pop bx
   164                                  	pop dx
   165                                  	ret
   166                                  %endif
   167                                  
   168 00000025 0A000000                READSTART dd 10
   169 00000029 01                      SECTORNUM  db 1
   170 0000002A 00000100                DESTMEM	   dd 0x10000
   171                                  
   172                                  
   173                                  section data align=16 vstart=0
   174 00000000 48656C6C6F20576F72-     	Hello db 'Hello World ,I am from program on sector 2,loaded by bootloader'
   174 00000009 6C64202C4920616D20-
   174 00000012 66726F6D2070726F67-
   174 0000001B 72616D206F6E207365-
   174 00000024 63746F7220322C6C6F-
   174 0000002D 616465642062792062-
   174 00000036 6F6F746C6F61646572 
   175 0000003F 0D0A                    	db 0x0d , 0x0a
   176 00000041 6E6F77207379737465-     	db 'now system is testing new line function if cr lt do not work ,halt the OS'
   176 0000004A 6D2069732074657374-
   176 00000053 696E67206E6577206C-
   176 0000005C 696E652066756E6374-
   176 00000065 696F6E206966206372-
   176 0000006E 206C7420646F206E6F-
   176 00000077 7420776F726B202C68-
   176 00000080 616C7420746865204F-
   176 00000089 53                 
   177 0000008A 0A                      	db 0x0a
   178 0000008B 74686973206C696E65-     	db 'this line test 0x0a'
   178 00000094 207465737420307830-
   178 0000009D 61                 
   179 0000009E 0D                      	db 0x0d
   180 0000009F 74686973206C696E65-     	db 'this line test 0x0d'
   180 000000A8 207465737420307830-
   180 000000B1 64                 
   181 000000B2 0D0A                    	dw 0x0a0d
   182 000000B4 74686973206C696E65-     	db 'this line test 0x0d 0x0a'
   182 000000BD 207465737420307830-
   182 000000C6 642030783061       
   183 000000CC 0D0A                    	dw 0x0a0d
   184 000000CE 7468697320636F6E74-     	db 'this context output powered by bios int 0x10'
   184 000000D7 657874206F75747075-
   184 000000E0 7420706F7765726564-
   184 000000E9 2062792062696F7320-
   184 000000F2 696E742030783130   
   185 000000FA 00                      	HelloEnd db 0x00
   186                                  	StackEnd:
   187                                  section stack align=16 vstart=0
   188 00000000 00<rep 80h>             	times 128 db 0 ;同样占位128,替代resb 128,避免警告
   189                                  section end align=16
   190                                  	ProgramEnd:
